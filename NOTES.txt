Project notes initialized

1. Install vue cli globally
npm install --global @vue/cli

2. crate vue project
vue create moz-todo-vue

3. vue component
example.vue:-
    1.<template>
        it is the dispaly logic of the component
        contains html and vue specific syntax
    2.<script>
        non dispaly logic
        returns defined components, methods, properties and state etc
        while rendering vue will convert this export and template to a .vue component
    3.<style>
        write css style for the component (scoped)

we can import one component to another component

4. Run vue server 
    npm run serve
    http://localhost:8080/


II. Creating first vue component

Objective:-
1.calling component to another component
2.passing data to component via properties
3.saving states

===> state:-
state of a component defined by the prop passed to it
value of the props gives the inital state for the component that affects their dispaly
define prop inside export default {}
export default {
    prop: {
        propName: {required : true, default : "default value", type: String}
    }
}

===> data():-
data() object used to manage local state of a component

syntax:
data() : {
    return {
        key: value
    }
}

access prop value inside a data() by using --> this.exampleProp
bind script expressions with html syntax --> <input :checked="isDone" />
v-bind:checked="isDone" ====> :checked = "isDone"

===> install lodash for unique id
npm install --save lodash.uniqueid
uniqueid() method generated unique id


III. Rendering a list of Vue components.
adding a set of todo item data to our App.vue component,
which we'll then loop through and display inside ToDoItem components using the v-for directive.

v-for --> it is similar to for in loop
it can be applied to elements you want to repeat
:key attribute is necesseray with v-for, because while looping vue will not recreate elements, its just re-using elements appropriately so that :key is needed

IV. Adding a new todo form: Vue events, methods, and models

--Objective:-
To learn about handling forms in Vue, and by association, events, models, and methods

What we really need next is the ability to allow our users to enter their own todo items into the app, and for that we'll need a text <input>, an event to fire when the data is submitted, a method to fire upon submission to add the data and rerender the list, and a model to control the data. This is what we'll cover in this article

table of contents:-
Creating a New To-Do form
Creating a method & binding it to an event with v-on
Binding data to inputs with v-model
Changing v-model behavior with modifiers
Passing data to parents with custom events
Adding the new todo into our data
Using v-model to update an input value

==>Creating a method & binding it to an event with v-on
every methods should be defined inside methods() object

methods can be called using various event handler 
v-on:event="method-name"  ===> @event="method-name"

event modifiers can be used to prevent browsers default event behaviours such as e.preventDefault() to prevent submission ==> @event.modifier

==>Binding data to inputs with v-model
v-model="label"

