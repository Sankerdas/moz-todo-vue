Project notes initialized

1. Install vue cli globally
npm install --global @vue/cli

2. crate vue project
vue create moz-todo-vue

3. vue component
example.vue:-
    1.<template>
        it is the dispaly logic of the component
        contains html and vue specific syntax
    2.<script>
        non dispaly logic
        returns defined components, methods, properties and state etc
        while rendering vue will convert this export and template to a .vue component
    3.<style>
        write css style for the component (scoped)

we can import one component to another component

4. Run vue server 
    npm run serve
    http://localhost:8080/


II. Creating first vue component

Objective:-
1.calling component to another component
2.passing data to component via properties
3.saving states

===> state:-
state of a component defined by the prop passed to it
value of the props gives the inital state for the component that affects their dispaly
define prop inside export default {}
export default {
    prop: {
        propName: {required : true, default : "default value", type: String}
    }
}

===> data():-
data() object used to manage local state of a component

syntax:
data() : {
    return {
        key: value
    }
}

access prop value inside a data() by using --> this.exampleProp
bind script expressions with html syntax --> <input :checked="isDone" />

===> install lodash for unique id
npm install --save lodash.uniqueid
uniqueid() method generated unique id


III. Rendering a list of Vue components.
adding a set of todo item data to our App.vue component,
which we'll then loop through and display inside ToDoItem components using the v-for directive.

v-for --> it is similar to for in loop
it can be applied to elements you want to repeat
:key attribute is necesseray with v-for, because while looping vue will not recreate elements, its just re-using elements appropriately so that :key is needed


